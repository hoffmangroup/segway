#include "traindir/auxiliary/segway.inc"

GRAPHICAL_MODEL model_seg

frame: 0 {
   variable: segCountDown {
      type: TYPE_SEGCOUNTDOWN;
      conditionalparents: seg(0) using DeterministicCPT("seg_segCountDown");
   }

   variable: seg {
      type: TYPE_SEG;
      conditionalparents: nil using DenseCPT("start_seg");
      % Line below defines labels
      symboltable: collection("collection_seg_testtrack1");
   }

   variable: presence__testtrack1 {
      type: discrete observed 2:2 cardinality CARD_PRESENCE;

      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }

   variable: testtrack1 {
      type: continuous observed 0:0;
      switchingparents: presence__testtrack1(0) using mapping("internal:copyParent");
      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_testtrack1") MAPPING_OBS;
      weight: scale 1.000000;
   }

   variable: presence__testtrack2 {
      type: discrete observed 3:3 cardinality CARD_PRESENCE;
      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }

   variable: testtrack2 {
      type: continuous observed 1:1;
      switchingparents: presence__testtrack2(0) using mapping("internal:copyParent");
      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_testtrack2") MAPPING_OBS;
      weight: scale 1.000000;
   }
}

frame: 1 {
   variable: frameIndex {
      type: discrete observed value frameNum cardinality CARD_FRAMEINDEX;
      conditionalparents: CONDITIONALPARENTS_NIL_DISCRETE;
   }

   variable: ruler {
      type: discrete hidden cardinality CARD_RULER;
      conditionalparents: frameIndex(0) using DeterministicCPT("frameIndex_ruler");
   }

   variable: segCountDown {
      type: TYPE_SEGCOUNTDOWN;
      conditionalparents: segTransition(0), ruler(0), seg(0), segCountDown(-1)
                          using DeterministicCPT("segTransition_ruler_seg_segCountDown_segCountDown");
   }

   variable: segTransition {
      type: discrete hidden cardinality CARD_SEGTRANSITION;
      conditionalparents: segCountDown(-1), seg(-1) using DenseCPT("segCountDown_seg_segTransition");
      weight: scale SEGTRANSITION_WEIGHT_SCALE;
   }

   variable: seg {
      type: TYPE_SEG;
      conditionalparents: seg(-1) using DeterministicCPT("seg_seg_copy")
                          | seg(-1) using DeterministicCPT("seg_seg_copy")
                          | seg(-1) using DenseCPT("seg_seg");
      switchingparents: segTransition(0) using mapping("internal:copyParent");
      % Line below defines labels
      symboltable: collection("collection_seg_testtrack1");   
}

   variable: presence__testtrack1 {
      type: discrete observed 2:2 cardinality CARD_PRESENCE;
      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }

   variable: testtrack1 {
      type: continuous observed 0:0;
      switchingparents: presence__testtrack1(0) using mapping("internal:copyParent");
      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_testtrack1") MAPPING_OBS;
      weight: scale 1.000000;
   }

   variable: presence__testtrack2 {
      type: discrete observed 3:3 cardinality CARD_PRESENCE;
      conditionalparents: CONDITIONALPARENTS_PRESENCE;
   }

   variable: testtrack2 {
      type: continuous observed 1:1;
      switchingparents: presence__testtrack2(0) using mapping("internal:copyParent");
      conditionalparents: CONDITIONALPARENTS_NIL_CONTINUOUS | CONDITIONALPARENTS_OBS using mixture collection("collection_seg_testtrack2") MAPPING_OBS;
      weight: scale 1.000000;
   }
}

chunk 1:1
